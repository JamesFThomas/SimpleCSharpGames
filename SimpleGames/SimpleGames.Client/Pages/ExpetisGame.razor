@rendermode InteractiveAuto

@using SimpleGames.Client.Models

@if (!expetisGame.StillGuessing)
{
	<h3>You Won!</h3>
	<p class="alert alert-success"> @expetisGame.TargetNumber was the target!</p>
	<button class="btn btn-primary" @onclick="StartGame">Play Again</button>
}
else
{
	<p>Guess a number between 0 and 9:</p>
	<input type="number" @bind="currentGuess" min="0" max="9" />
	<button class="btn btn-primary" @onclick="SubmitGuess">Submit Guess</button>

	@if (!string.IsNullOrEmpty(guessFeedback))
	{
		@if (!string.IsNullOrEmpty(bgColor) && bgColor.Equals("success"))
		{
			<div class="alert alert-warning">@guessFeedback</div>
		}
		else
		{
			<div class="alert alert-danger">@guessFeedback</div>
		}
	}

	@if (expetisGame.Guesses.Count > 0)
	{
		<h6>Previous Guesses:</h6>
		@foreach (var guess in expetisGame.Guesses)
		{
			<p class="d-inline-flex p-2">@guess</p>
		}
	
	}

}

@code {

	private ExpetiGameState expetisGame = new ExpetiGameState();

	private int currentGuess;

	private string? guessFeedback;

	private string? bgColor;

	protected override void OnInitialized() 
	{
		StartGame();
	}

	private void StartGame()    
	{
		expetisGame.Start();
		currentGuess = 0;
		guessFeedback = string.Empty; 
	}

	private void SubmitGuess()
	{
		if (expetisGame.IsValidGuess(currentGuess))
		{
			if (currentGuess == expetisGame.TargetNumber)							// Check if the current guess matches the target
			{
				expetisGame.GameOver(); 
				guessFeedback = string.Empty;		
				return;
			}

			bgColor = "success";
			guessFeedback = $"Valid guess but {currentGuess} is not the target!";	// Set feedback message for incorrect guess


			expetisGame.TrackPlayerGuess(currentGuess);								// Add correct guess to the game state Guesses List

		}
		else
		{
			bgColor = "danger";
			guessFeedback = $"Invalid guess {currentGuess} has already been guessed.";   // Set invalid feedback message
		}

	}

}
